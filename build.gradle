plugins {
  id 'java'
  id 'jacoco'
  id("org.jetbrains.intellij") version "1.16.1"
  id("org.jetbrains.grammarkit") version "2022.3.2.2"
  id("dev.bmac.intellij.plugin-uploader") version "1.3.2"
}

repositories {
  mavenCentral()
}

def isCI = System.getenv("CI")
def platformVersionExternDefinition = System.getenv("IDEA_VERSION")
platformVersion = platformVersionExternDefinition ? platformVersionExternDefinition : platformVersion
def isEAP = platformVersion.contains("LATEST-EAP-SNAPSHOT") || platformVersion.take(4).contains(".")
def artifactVersion = pluginVersion + "-" + (isEAP ? "EAP" : platformVersion)
println "PlatformVersion is : ${platformVersion}"
println "ArtifactVersion is : ${artifactVersion}"

group = pluginGroup
version = artifactVersion

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

configurations {
  lombok
}

dependencies {
  lombok group: 'org.projectlombok', name: 'lombok', version: '1.18.30', classifier: 'sources', ext: 'jar'

  testImplementation("junit:junit:4.13.2")
  testImplementation("org.mockito:mockito-core:5.8.0")
  testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.10.1")
}

task generateLombok {
  doLast {
    copy {
      includeEmptyDirs = false
      from({ zipTree(configurations.lombok.singleFile) }) {
        include 'lombok/core/handlers/Singulars.java'
      }
      into("generated/src")
    }

    copy {
      includeEmptyDirs = false
      from({ zipTree(configurations.lombok.singleFile) }) {
        include '**/*.txt'
      }
      into("generated/resources")
    }
  }
}

check.dependsOn jacocoTestReport

test {
  // show standard out and standard error of the test JVM(s) on the console
  testLogging {
    exceptionFormat = 'full'
    showStandardStreams = true
  }
  if (isCI) {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      exceptionFormat "full"
    }
  }

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
  //  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  dependsOn("generateLexer", /*"generateParser",*/ "generateLombok")
}

tasks {

  sourceSets {
    main {
      java.srcDirs 'src/main/java', 'generated/src', 'lang/src'
      resources.srcDirs 'src/main/resources', 'generated/resources'
    }
    test {
      java.srcDir 'test/java'
      resources.srcDirs 'test/resources', 'testData'
    }
  }

  processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  }

  clean {
    delete("generated")
    delete("out")
  }

  generateLexer {
    println "Generating Lexer for JFlexRelease: ${grammarKit.jflexRelease}"

    sourceFile = file("src/main/resources/de/plushnikov/intellij/plugin/language/lombokConfig.flex")
    targetDir = "lang/src/de/plushnikov/intellij/plugin/language"
    targetClass = "LombokConfigLexer"
    purgeOldFiles = true
  }

  generateParser {
    println "Generating Parser for GrammerKit: ${grammarKit.grammarKitRelease}"

    sourceFile = file("src/main/resources/de/plushnikov/intellij/plugin/language/lombokConfig.bnf")
    targetRoot = "lang/src"
    pathToParser = "/de/plushnikov/intellij/plugin/language/parser/LombokConfigParser.java"
    pathToPsiRoot = "/de/plushnikov/intellij/plugin/language/psi"
    purgeOldFiles = true
  }

  intellij {
    version = platformVersion
    println "Building for IntelliJ version: ${platformVersion}"

    pluginName = intellijPluginName
    sandboxDir = "${rootProject.projectDir}/idea-sandbox/idea-${platformVersion}"

    plugins = ['com.intellij.java']
  }

  patchPluginXml {
    version = artifactVersion

    pluginDescription = file(descriptionFile).text
    changeNotes = file(changesFile).text
  }

  buildPlugin {
    archiveBaseName = intellijPluginName
  }

  publishPlugin {
    token = System.getenv('IJ_PLUGIN_TOKEN')
  }

//  signPlugin {
//    certificateChain = environment("CERTIFICATE_CHAIN")
//    privateKey = environment("PRIVATE_KEY")
//    password = environment("PRIVATE_KEY_PASSWORD")
//  }

//  runIde {
//      jvmArgs = listOf("-Xmx1024m", "-XX:+UnlockDiagnosticVMOptions")
//    //  systemProperty("ide.plugins.snapshot.on.unload.fail", "true")
//    //  jvmArgs '-agentpath:"D:\\yjpagent.dll"'
//    //  jvmArgs '-Didea.ProcessCanceledException=disabled'
//  }
}
