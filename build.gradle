plugins {
  id "org.jetbrains.intellij" version "0.4.2"
  id "org.jetbrains.grammarkit" version "2018.2.2"
  id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}

repositories {
  mavenCentral()
  mavenLocal()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'jacoco'
apply plugin: "com.github.ManifestClasspath"


def ideaVersionExternDefinition = System.getenv("IDEA_VERSION")
ideaVersion = ideaVersionExternDefinition ? ideaVersionExternDefinition : ideaVersion
def isEAP = ideaVersion.contains("LATEST-EAP-SNAPSHOT") || ideaVersion.take(4).contains(".")
def artifactVersion = pluginVersion + "-" + (isEAP ? "EAP" : ideaVersion)
println "IdeaVersion is : ${ideaVersion}"
println "ArtifactVersion is : ${artifactVersion}"

group = pluginGroup
version = artifactVersion

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) { 
  options.encoding = 'UTF-8'
//  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

sourceSets {
  main {
    java.srcDirs 'src/main/java', 'generated/src'
    resources.srcDirs 'src/main/resources', 'generated/resources'
  }
  test {
    java.srcDir 'test/java'
    resources.srcDirs 'test/resources', 'testData'
  }
}

intellij {
  version ideaVersion 
  println "Building for IntelliJ version: ${version}"

  pluginName pluginName
  updateSinceUntilBuild true
  sameSinceUntilBuild false
  sandboxDirectory = "${rootProject.projectDir}/idea-sandbox/idea-${ideaVersion}"

  plugins 'coverage'
}

patchPluginXml {
  version artifactVersion
  // use open until build for last release
  if (isEAP) {
    untilBuild ""
  }

  pluginDescription(file(descriptionFile).text)
  changeNotes(file(changesFile).text)
}

publishPlugin {
  username System.getenv('IJ_REPO_USERNAME')
  password System.getenv('IJ_REPO_PASSWORD')
}

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
  }
}

configurations {
  lombok
}

dependencies {
  lombok group: 'org.projectlombok', name: 'lombok', version: '1.18.4', classifier: 'sources', ext: 'jar'

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '1.+'
}

// Tasks
copy {
  includeEmptyDirs = false
  from({ zipTree(configurations.lombok.singleFile) }) {
    include 'lombok/extern/**'
    include 'lombok/experimental/**'
    include 'lombok/Builder.java'
    include 'lombok/AccessLevel.java'
    include 'lombok/*ArgsConstructor.java'
    include 'lombok/Cleanup.java'
    include 'lombok/Data.java'
    include 'lombok/Delegate.java'
    include 'lombok/Getter.java'
    include 'lombok/Setter.java'
    include 'lombok/EqualsAndHashCode.java'
    include 'lombok/NonNull.java'
    include 'lombok/Synchronized.java'
    include 'lombok/ToString.java'
    include 'lombok/SneakyThrows.java'
    include 'lombok/Value.java'
    include 'lombok/val.java'
    include 'lombok/var.java'
    include 'lombok/Singular.java'
    include 'lombok/core/handlers/Singulars.java'
  }
  into("generated/src")
}

copy {
  includeEmptyDirs = false
  from({ zipTree(configurations.lombok.singleFile) }) {
    include '**/*.txt'
  }
  into("generated/resources")
}

//grammarKit {
//  //tag or short commit hash of IntelliJ patched JFlex
//  jflexRelease = '1.7.0-1'
//  //tag or short commit hash of Grammar-Kit to use
//  grammarKitRelease = '34fd65b92a'
//}

task generateLombokConfigParser(type: org.jetbrains.grammarkit.tasks.GenerateParser) {
  println "Generating Parser for GrammerKit: ${grammarKit.grammarKitRelease}"

  source "src/main/resources/de/plushnikov/intellij/plugin/language/lombokConfig.bnf"
  targetRoot = "generated/src"
  pathToParser "/de/plushnikov/intellij/plugin/language/parser/LombokConfigParser.java"
  pathToPsiRoot "/de/plushnikov/intellij/plugin/language/psi"
}

task generateLombokConfigLexer(type: org.jetbrains.grammarkit.tasks.GenerateLexer) {
  dependsOn generateLombokConfigParser
  println "Generating Lexer for JFlexRelease: ${grammarKit.jflexRelease}"

  source = "src/main/resources/de/plushnikov/intellij/plugin/language/lombokConfig.flex"
  targetDir = "generated/src/de/plushnikov/intellij/plugin/language"
  targetClass = "LombokConfigLexer"
}

clean.doFirst {
  delete 'generated', 'out'
}

compileJava.dependsOn generateLombokConfigLexer
check.dependsOn jacocoTestReport

//plugins.withType(JavaPlugin) {
//  test {
//    systemProperty "NO_FS_ROOTS_ACCESS_CHECK", "true"
//  }
//}
